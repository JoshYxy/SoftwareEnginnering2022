{"ast":null,"code":"// 配置 mock 文件\n// 首先引入Mock\nconst Mock = require('mockjs'); // 设置拦截ajax请求的相应时间\n\n\nMock.setup({\n  timeout: '200-600'\n});\nlet configArray = []; // 使用webpack的require.context()遍历所有mock文件\n\nconst files = require.context('.', true, /\\.js$/);\n\nfiles.keys().forEach(key => {\n  if (key === './index.js') return;\n  configArray = configArray.concat(files(key).default);\n}); // 注册所有的mock服务\n\nconfigArray.forEach(item => {\n  for (let [path, target] of Object.entries(item)) {\n    let protocol = path.split('|');\n    Mock.mock(new RegExp('^' + protocol[1]), protocol[0], target);\n  }\n});","map":{"version":3,"sources":["D:/fdu/software_engineering/Lab/5-Lab/front_end/src/mock/index.js"],"names":["Mock","require","setup","timeout","configArray","files","context","keys","forEach","key","concat","default","item","path","target","Object","entries","protocol","split","mock","RegExp"],"mappings":"AAAA;AACA;AACA,MAAMA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAApB,C,CAEA;;;AACAD,IAAI,CAACE,KAAL,CAAW;AACPC,EAAAA,OAAO,EAAE;AADF,CAAX;AAIA,IAAIC,WAAW,GAAG,EAAlB,C,CAEA;;AACA,MAAMC,KAAK,GAAGJ,OAAO,CAACK,OAAR,CAAgB,GAAhB,EAAqB,IAArB,EAA2B,OAA3B,CAAd;;AACAD,KAAK,CAACE,IAAN,GAAaC,OAAb,CAAsBC,GAAD,IAAS;AAC1B,MAAIA,GAAG,KAAK,YAAZ,EAA0B;AAC1BL,EAAAA,WAAW,GAAGA,WAAW,CAACM,MAAZ,CAAmBL,KAAK,CAACI,GAAD,CAAL,CAAWE,OAA9B,CAAd;AACH,CAHD,E,CAKA;;AACAP,WAAW,CAACI,OAAZ,CAAqBI,IAAD,IAAU;AAC1B,OAAK,IAAI,CAACC,IAAD,EAAOC,MAAP,CAAT,IAA2BC,MAAM,CAACC,OAAP,CAAeJ,IAAf,CAA3B,EAAiD;AAC7C,QAAIK,QAAQ,GAAGJ,IAAI,CAACK,KAAL,CAAW,GAAX,CAAf;AACAlB,IAAAA,IAAI,CAACmB,IAAL,CAAU,IAAIC,MAAJ,CAAW,MAAMH,QAAQ,CAAC,CAAD,CAAzB,CAAV,EAAyCA,QAAQ,CAAC,CAAD,CAAjD,EAAsDH,MAAtD;AACH;AACJ,CALD","sourcesContent":["// 配置 mock 文件\r\n// 首先引入Mock\r\nconst Mock = require('mockjs');\r\n\r\n// 设置拦截ajax请求的相应时间\r\nMock.setup({\r\n    timeout: '200-600'\r\n});\r\n\r\nlet configArray = [];\r\n\r\n// 使用webpack的require.context()遍历所有mock文件\r\nconst files = require.context('.', true, /\\.js$/);\r\nfiles.keys().forEach((key) => {\r\n    if (key === './index.js') return;\r\n    configArray = configArray.concat(files(key).default);\r\n});\r\n\r\n// 注册所有的mock服务\r\nconfigArray.forEach((item) => {\r\n    for (let [path, target] of Object.entries(item)) {\r\n        let protocol = path.split('|');\r\n        Mock.mock(new RegExp('^' + protocol[1]), protocol[0], target);\r\n    }\r\n});"]},"metadata":{},"sourceType":"script"}